package com.mov.leetcode.array.dfs

import java.util.Arrays

/**
 * ### Author: fuxinbo
 * ### Date: 2022/6/24
 * ### Modify: 中等
 * ### Description: 62. 不同路径
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
 *
 * 问总共有多少条不同的路径？
 * ## 例子:
 * ### 示例 1：
 * ```
 * 输入：m = 3, n = 7
 * 输出：28
 * ```
 * ### 示例 2：
 * ```
 * 输入：m = 3, n = 2
 * 输出：3
 * 解释：
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向下
 * ```
 * ## 思路:
 * 动态规划最主要的就是先根据题目来找到转移方程，然后根据方程来进行初始化
 * 最后通过循环来进行模拟方程
 * 当前题目的方程为:
 * ```
 * dp[i][j] = dp[i-1][j] + dp[i][j-1]
 * ```
 * 当前位置的路径数 = 当前位置的上边的路径数 + 当前位置左边的路径数（因为在题目中可得，只能向下或向右走）
 * ## 成绩:
 * - 执行用时：144ms, 在所有 Kotlin 提交中击败了30.00%的用户
 * - 内存消耗：32.1MB, 在所有 Kotlin 提交中击败了32.50%的用户
 *
 */

fun main() {
    println(Solution62().uniquePaths(3, 7))
}

class Solution62 {
    fun uniquePaths(m: Int, n: Int): Int {
        // 这里多加了一列，是因为转移方程需要从上边的元素与左边的元素来进行相加，所以就需要在第一排的数据上再加一排数据
        // 这里都将元素初始化为1，是因为每个元素最少都有1条路径，也就是他自己
        val dp = Array(m + 1) { IntArray(n) { 1 } }
        // 从第2排开始
        for (i in 1 until  m) {
            for (j in 1 until  n) {
                // 转移方程为，当前位置的路径数等于 上边路径 + 左边路径
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
            }
        }
        return dp[m - 1][n - 1]
    }
}