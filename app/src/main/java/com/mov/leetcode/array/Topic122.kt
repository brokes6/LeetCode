package com.mov.leetcode.array

import kotlin.math.min

/**
 * ### Author: fuxinbo
 * ### Date: 2022/9/10
 * ### Modify: 中等
 * ### Description: 122. 买卖股票的最佳时机 II
 * 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
 * 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
 * 返回 你能获得的 最大 利润 。
 * ## 例子:
 * ### 示例 1：
 * ```
 * 输入：prices = [7,1,5,3,6,4]
 * 输出：7
 * 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
 * 总利润为 4 + 3 = 7 。
 * ```
 * ### 示例 2：
 * ```
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
 * 总利润为 4 。
 * ```
 * ## 思路:
 * 这题与购买股票的最佳时机1的区别在于
 * - 1的题目中明确规定了只能够购买一次与出售一次
 * - 而2的题目中规定了每天都可以购买与每天都可以出售，但是在同时间，手上只能存在一支股票
 *
 * 于是我们可以在1的基础上进行改变，当每次计算得出的利益大于0时，我们就将当前利益与累计的利益合并起来
 * 然后重新设置当前购买的最小值，继续循环
 * ## 成绩:
 * - 执行用时：204ms, 在所有 Kotlin 提交中击败了42.17%的用户
 * - 内存消耗：36.7MB, 在所有 Kotlin 提交中击败了18.07%的用户
 *
 */
fun main() {
    println(Solution122().maxProfit(intArrayOf(7,1,5,3,6,4)))
}


class Solution122 {
    fun maxProfit(prices: IntArray): Int {
        if (prices.isEmpty()) return 0
        var min = prices[0]
        var max = 0
        for (i in prices.indices) {
            // 计算出当前售出所得利益
            val current = (prices[i] - min)
            // 若利益大于0，则表示为可用利益，则累加到一起
            // 但是我觉得这里是在计算有利益就可，而不太是计算最大利益(但是能通过答案)
            if (current > 0){
                max += current
                // 重置购买股票的最小值
                min = prices[i]
            }
            min = min(min, prices[i])
        }
        return max
    }
}