package com.mov.leetcode.array


/**
 * ### Author: fuxinbo
 * ### Date: 2022/8/30
 * ### Modify: 中等
 * ### Description: 31. 下一个排列
 * 整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
 * - 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
 * 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。
 * 更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。
 * 如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
 * - 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
 * - 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
 * - 而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
 * 给你一个整数数组 nums ，找出 nums 的下一个排列。
 * 必须 原地 修改，只允许使用额外常数空间。
 * * 这道题的意思是给你一个数组，需要你找出他的下一个较大的排列顺序(注意，是要相邻的)，
 * 若没有比本身更大的排列了，那就返回最小的排列即可
 * ## 例子:
 * ### 示例 1：
 * ```
 * 输入：nums = [1,2,3]
 * 输出：[1,3,2]
 * ```
 * ### 示例 2：
 * ```
 * 输入：nums = [3,2,1]
 * 输出：[1,2,3]
 * ```
 * ### 示例 3：
 * ```
 * 输入：nums = [1,1,5]
 * 输出：[1,5,1]
 * ```
 * ## 思路:
 * 首先先从尾部开始查找，查找到不是顺序排序的元素i，然后再次从尾部开始查找，
 * 查找一个比i大一点点的元素j，使这两个元素进行交换。
 * 最后在使i之后的元素进行反转(因为反转后的排列就是最小排列了)
 * ## 成绩:
 * - 执行用时：184ms, 在所有 Kotlin 提交中击败了84.75%的用户
 * - 内存消耗：34.9MB, 在所有 Kotlin 提交中击败了81.36%的用户
 *
 */
fun main() {
    println(Solution31().nextPermutation(intArrayOf(1,2,3)))
}

class Solution31 {
    fun nextPermutation(nums: IntArray): Unit {
        // 这里有点不太明白
        var i = nums.size - 2
        // 查找这个数组中不是顺序排序的第一个元素
        // 若都是按照顺序排列的，那么就跳过这个步骤，进行查找一个较大的元素
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--
        }
        // 查找比i较大的元素，用于和i进行交换，来进一步达到下一个更大的排列
        if (i >= 0) {
            // j从尾部开始循环
            var j = nums.size - 1
            while (j >= 0 && nums[i] >= nums[j]) {
                j--
            }
            // 交换这两个元素
            swap(nums, i, j)
        }
        // 然后将i后面的元素进行反转，这样后面的元素就形成了最小排列
        reverse(nums, i + 1)
    }

    /**
     * 通过异运算进行交换元素
     * 异运算: xor 相同为0,不同为1 00 xor 01 = 01
     * - 第一次异运算是将y的值赋值给x(x xor y = y)
     * - 第二次异运算是将x的值再次通过异运算变回x并赋值给y((x xor y) xor y = x)
     * - 第三次异运算是将y的值通过异运算便会x并赋值给x((x xor y) xor x = y)
     */
    private fun swap(nums: IntArray, x: Int, y: Int) {
        nums[x] = nums[x] xor nums[y]
        nums[y] = nums[x] xor nums[y]
        nums[x] = nums[x] xor nums[y]
    }

    /**
     * 将给定元素之后的元素都进行反转
     */
    private fun reverse(nums: IntArray, start: Int) {
        var x = start
        var y = nums.size - 1
        while (x < y) {
            swap(nums, x, y)
            x++
            y--
        }
    }

}